<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="100nin1syu"
            description="Gadget of 100 waka poem"
            author="Hiromi Hayashi">
  <Require feature="wave"/>
  <Require feature="dynamic-height"/>
  </ModulePrefs>
  <Content type="html">
  <![CDATA[
  <script type="text/javascript" src="http://www.hayashih.dev-asp.net/Wave/100nin1syu/json2.js"></script>
  <script type="text/javascript" src="http://www.hayashih.dev-asp.net/Wave/100nin1syu/100nin1syu_json.js"></script>
  <script type="text/javascript" src="http://www.hayashih.dev-asp.net/Wave/100nin1syu/game.js"></script>
  <script type="text/javascript" src="http://wave-api.appspot.com/public/wave.js">
  </script>
  <style>
    td {
        border:2px solid red;
        font-size: x-small;
        background: #F5F5DC;
    }
    div.gyo{
        float:right;
        margin-left:0.9em;
        width:1em;
    }
    div#utaArea{
        height:30px
    }
    div#result{
        display:none
    }
    a#showResultLink, a#hideResultLink{
        display:none
    }
    img
    {
        width:20px;
        height:20px;
    }
  </style>
  <div class="container">
    <div id="utaArea"></div>
    <div id="setting"></div>
  </div>
  <table id="battlefield"></table>
  <span id="member"></span>
  <span>
    <a id="showResultLink">結果表示</a>
    <a id="hideResultLink">結果を隠す</a>
  </span>
  <div id="resultDiv">
  </div>
  <script>

    var count = 0;
    var timer = null;
    var game = null;
    var curUta = null;

    var dataNumber = 20; // The number of sheets of card used in game

    var utaReading = false;

    var icons = {};

    var isDebug = false;

    var utaArea = document.getElementById('utaArea');
    var battlefield = document.getElementById('battlefield');
    var member = document.getElementById('member');
    var setting = document.getElementById('setting');

    var resultDiv = document.getElementById('resultDiv');
    var showResultLink = document.getElementById('showResultLink');
    var hideResultLink = document.getElementById('hideResultLink');

    function participantUpdated()
    {
        var participants = wave.getParticipants(); 
                        
        for (var i = 0, l = participants.length; i < l; i++) {
            var id = participants[i].getId();
            var icon = icons[id] || document.createElement('IMG');
            icon.src = participants[i].getThumbnailUrl();
            icons[id] = icon;
        }
    }

    function stateUpdated()
    {
        if( isDebug ){
            reset();
        }

        var state = wave.getState(); 

        if( state.get("game"))
        {
            updateGame(state);
            
            // display card not yet.
            if( battlefield.innerHTML == "" )
            {
                displayFuda();
                setting.innerHTML = "";
                hideResult();
            }

        }else{
            setNewGame(state);
            return;
        }
        
        refrashDisplay();

        showMemberPoint();

        if( game.state ){

            var uta = game.getCurrentUta();
            if( curUta == null ||
                curUta.number != uta.number )
            {
                utaReading = false; 
                curUta = uta;
            }

            // 歌表示がまだはじまってない場合、歌を読みこみし直す
            // When the waka display doesn't start, it tries to waka the song. 
            if( !utaReading )
            {
                readUta();
                utaReading = true;
            }
        }
        else{
            
            if( timer ){ clearInterval(timer) };

            utaArea.innerHTML = "終了です！";

            battlefield.innerHTML = "";
            showResult();

            curUta = null;
            game = null;
            utaReading = false;

            var nextGameLink = document.createElement("a");
            nextGameLink.style.color = "blue";
            nextGameLink.innerHTML = "→もう一回やる";

            nextGameLink.onclick = function(){
                setNewGame(wave.getState());
            }
            utaArea.appendChild(nextGameLink);
            
        }

        gadgets.window.adjustHeight();
    }

    function updateWaveState()
    {
        var state = wave.getState(); 
        state["game"]  = JSON.stringify(game);
        wave.getState().submitDelta(state);

    }

    function reset()
    {
        var btn = document.createElement("input");
        btn.setAttribute("id", "submitbtn");
        btn.setAttribute("type", "button");
        btn.setAttribute("value", "reset");
        btn.onclick = function(){

            game = null;
            game = new Game();
            game.init(list_100nin1syu, 10);
            
            updateWaveState();
        };
        
        setting.appendChild(btn);
    }

    // Acquisition number of each members
    function showMemberPoint()
    {
        member.innerHTML = "";
        for( var participant in game.participants){
            member.appendChild(icons[participant]);
            member.innerHTML += String(game.participants[participant]) + "枚"; 
        }
    }
    
    // hide result area
    function hideResult()
    {
        //console.log("hideResult");

        resultDiv.style.display = 'none';
        resultDiv.innerHTML = "";
        showResultLink.style.display = 'none';
        hideResultLink.style.display = 'none';
    }

    // show result area
    function showResult()
    {
        //console.log("showResult");

        // for old data. game.result was object in old data 
        if( !game.results || !game.results.length ){ return; }

        showResultLink.onclick = function()
        {
            resultDiv.style.display = "block";
            hideResultLink.style.display = "inline";
            showResultLink.style.display = "none";
            gadgets.window.adjustHeight();
        };

        hideResultLink.onclick = function()
        {
            resultDiv.style.display = "none";
            showResultLink.style.display = "inline";
            hideResultLink.style.display = "none";
            gadgets.window.adjustHeight();
        };
        
        var resultStr = "";
        for(var i=0; i < game.results.length; i++)
        {
            var result = game.results[i];
            resultStr += (i+1) + "枚目.";
            resultStr += '<img src="' + icons[result.userId].src + '" />';
            resultStr += game.getUta(result.number).uta_kami + " " + game.getUta(result.number).uta_shimo + "<br />";

        }
        resultDiv.innerHTML = resultStr;
        showResultLink.style.display = "inline";
        hideResultLink.style.display = "none";
    }

    function readUta()
    {
        if( timer ){ clearInterval(timer) };
        utaArea.innerHTML = "";
        count = 0; 

        timer = setInterval("writeChar()",1000);
    }

    function refrashDisplay()
    {
        var isFade = false;

        var tdlist = document.getElementsByTagName("td");
        // caution! nested loop!
        for(var i=0; i < tdlist.length; i++)
        {
             var td = tdlist[i];
             for(var j=0, l_fuda=game.fudaList.list.length; j < l_fuda; j++)
             {
                 if( parseInt(td.id) == parseInt(game.fudaList.list[j].number) )
                 {
                     // fadeout background
                    if( !isFade && 
                        td.style.visibility != game.fudaList.list[j].visibility)
                    {
                        isFade = true;
                        battlefield.style.background = "#99FF99"; // green
                        fadeBackground();
                    }

                    td.style.background = game.fudaList.list[j].background;
                    td.style.visibility = game.fudaList.list[j].visibility;
                 }
             }
        }
    }

    // setting new game
    function setNewGame(state)
    {
        
        var tbx = document.createElement("input");
        tbx.setAttribute("id", "fudaNumber");
        tbx.setAttribute("type", "text");
        tbx.setAttribute("size", "3");
        tbx.setAttribute("maxlength", "3");
        
        var btn = document.createElement("input");
        btn.setAttribute("id", "submitbtn");
        btn.setAttribute("type", "button");
        btn.setAttribute("value", "決定");
        btn.onclick = function(){
            var fnTbx = document.getElementById("fudaNumber");

            var number = dataNumber;
            var regNum = new RegExp("^[0-9]+$");
            if( regNum.test(fnTbx.value)){
                number = parseInt(fnTbx.value);
            }
            
            game = new Game();
            game.init(list_100nin1syu, number);
            
            updateWaveState();
        };
        
        setting.innerHTML = "枚数を決めてください。<br />"
        setting.appendChild(tbx);
        tbx.value = String(dataNumber); 
        setting.appendChild(btn);

        gadgets.window.adjustHeight();
    }

    // load current game data
    function updateGame(state)
    {
        if( !wave )
        {
            return;
        }
        var gameData = JSON.parse(state.get("game"));
        game = new Game();
        game.load(gameData);

        // game objectの形式移行のための対策
        if( !game.results || !game.results.length )
        {
            game.results = [];
        }

    }

    function displayFuda()
    {
        for(var i=0, l = game.fudaList.list.length; i< l; i++)
        {
            if( i==0 || i % 10 == 0 )
            {
                var tr = document.createElement("tr");
                battlefield.appendChild(tr);
                parentElm = tr;
            }

            var box_id = game.fudaList.list[i].number;

            var box = document.createElement("td");
            box.id = String(box_id);

            var content = game.fudaList.list[i].content;
            // delete space
            content = content.replace(' ','');

            // write poem to card
            // split poem line
            for(var j=0, mc = 5; j < 3; j++){
                var gyo = document.createElement("div");
                gyo.setAttribute("class", "gyo");

                var endIdx = (j+1) * mc;
                if( endIdx >= content.length ){ endIdx = content.length; }
                gyo.innerHTML += content.slice(j*mc, endIdx);
                box.appendChild(gyo);
            }

            parentElm.appendChild(box);

            box.onclick = function()
            {
                var state = wave.getState();
                var fuda = game.fudaList.getItem(this.id) 
                if( curUta.number == this.id )
                {
                    var userId = wave.getViewer().getId();
                    game.getFuda(this.id, userId);
                    
                    var getCount = game.participants[userId] || 0;
                    getCount = getCount + 1;
                    game.participants[userId] = getCount;

                }
                else
                {
                    game.otetsuki(this.id);
                }

                // stateUpdate
                updateWaveState();

            }   
        }
    }

    // display waka. characters, one each to display.
    function writeChar()
    {
        var uta = curUta.uta_kami + " "  + curUta.uta_shimo;
        if( count < uta.length )
        {
            utaArea.innerHTML += uta[count];
            // 決まり字判定
            if( curUta.kimariji && (parseInt(curUta.kimariji) == count+1) )
            {
                utaArea.innerHTML = '<span style="color:red">' + utaArea.innerHTML + '</span>';
            }
        }
        else{
            clearInterval(timer);
        }
        count++;
     }

     function fadeBackground(){
        var bg = battlefield.style.backgroundColor;
        bg = bg.replace("rgb(", "");
        bg = bg.replace(")", "");
        var colorParam = parseInt(bg.split(",")[0]);

        colorParam++;

         var str= cov16(colorParam);
         var newBgColor = "#" + str + 'FF' + str;
         battlefield.style.background = "#" + str + 'FF' + str;

         if( battlefield.style.background != "#FFFFFF" )
         {
            setTimeout("fadeBackground()",1);
         }

     }

    // Converting the number of two-digit decimal number to hexadecimal
    function cov16(i){
        var sin='0123456789ABCDEF';
        if(i>=255) return 'FF';
        if(i<=0) return '00';
        return sin.charAt(Math.floor(i/16))+sin.charAt(i%16);
    }

     function init()
     {
        if(wave && wave.isInWaveContainer())
        {
            //State更新時の処理を登録
            wave.setStateCallback(stateUpdated);
            // 参加者の更新処理を登録
            wave.setParticipantCallback(participantUpdated); 
        }

     }

     //初期化処理を登録する
     gadgets.util.registerOnLoadHandler(init);

  </script>
  ]]>
</Content>
</Module>
